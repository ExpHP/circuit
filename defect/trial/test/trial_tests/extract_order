#!/usr/bin/env python3

import json, argparse, sys

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('results', type=str, help='.results.json file')
	parser.add_argument('-n', type=int, default=0, help='desired trial number')
	args = parser.parse_args()

	with open(args.results) as f:
		info = json.load(f)
	order = info['trials'][args.n]['steps']['deleted']

	# Slight difference between how .results.json writes results and how we want
	# the order to look:  .results.json has an extra empty list at the beginning
	# to signify that the first step is the "initial state"
	assert order[0] == []
	order = order[1:]

	write_order(order, sys.stdout)

def write_order(order, f):
	# do a small amount of the serialization work ourselves (namely the outer list)
	#  so we can prettify the output a little

	f.write('[')

	# JSON doesn't have terminal commas.  Let join handle that for us.
	f.write('\n')
	f.write(',\n'.join([' '+json.dumps(x) for x in order])) # serialize individual rows
	f.write('\n') # still want a newline on last element; just not the comma

	f.write(']')
	f.write('\n') # textual output should always end in a newline for the sake of cat, etc

if __name__ == '__main__':
	main()
